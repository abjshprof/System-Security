Description:
We exploit three kinds of vulnerabilities here and mount the described attacks. The vulnerabilities are present in program
vuln.c.

1. Stack Smashing
• a data-only-attack on the local variable authd. In particular, we use stack smashing in auth to go past the stack frame 
  of auth into its caller’s frame, and modify the value of authd there. 
• a return-to-libc attack that returns to ownme. Do not hard-code the address of ownme in the exploit.
• a simple stack smashing attack that executes injected code on the stack that calls ownme().

2. Format String Attack
  Implement an attack that uses only the format string vulnerability. The goal is to execute arbitrary code injected by the attacker. 
  Our injected simply calls ownme().

3. Heap Overflow
• We exercise a heap overflow in my_free to overwrite return address on the stack so that when main loop returns, it executes ownme


To compile: 
     1. cp heap_overflow.c  stack_smashing_1a.c  stack_smashing_1b.c  stack_smashing_1c.c <your dir>
     2. overwrite your Makefile with the one here.
     3. make clean all //will generate binaries of all exploits with appropriate names


To run:
  ./<exploit_name> //Names are hopefully descriptive enough
